from dataclasses import dataclass, field
from typing import Dict, Any, List, Optional
from datetime import datetime


def sanitize_for_logging(text):
    """Sanitize text for logging by removing problematic characters."""
    if not text:
        return ""
    
    # Handle non-string inputs
    if not isinstance(text, str):
        try:
            text = str(text)
        except:
            return "[Non-string content]"
    
    try:
        # Use a more aggressive approach: keep only ASCII characters
        # This will remove all non-ASCII characters instead of replacing them
        return ''.join(c for c in text if ord(c) < 128)
    except:
        # If that fails for any reason, return a safe string
        return "[Content with unsupported characters]"
    

@dataclass
class ContentItem:
    """
    Standardized content model for all content types.
    This ensures consistent structure for content processors and summarizers.
    """
    # Required properties
    type: str  # Source platform type (youtube, twitter, article, etc.)
    content_id: str  # Unique ID for the content
    url: str   # Original URL
    title: str  # Content title
    author: str  # Main author/creator
    date: datetime  # Date of content creation
    content: str  # Primary text content
    
    # Optional metadata for platform-specific or additional data
    metadata: Dict[str, Any] = field(default_factory=dict)
    
@dataclass
class SummaryItem:
    """
    Standardized summary model for all content types.
    This ensures consistent structure for summaries across different platforms.
    
    Attributes:
        type (str): Source platform type (youtube, twitter, article, etc.)
        title (str): Content title
        author (str): Main author/creator
        url (str): Original content URL
        summary (str): Generated summary text
        content (str): Original content text
        tags (List[str]): Tags/keywords generated by the LLM
        thread_url (str): URL to the Discord thread (populated later)
    """
    type: str  # Source platform type (youtube, twitter, article, etc.)
    content_id: str  # Unique ID for the content
    title: str  # Content title
    author: str  # Main author/creator
    url: str  # Original content URL
    summary: str  # Generated summary text
    content: str  # Original content text
    tags: List[str] = field(default_factory=list)  # Tags/keywords generated by the LLM
    thread_url: str = ""  # URL to the Discord thread (populated later)