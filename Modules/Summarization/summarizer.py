import logging
from typing import Dict, Any, Callable, Awaitable, Optional

from Modules.Commons import config

logger = logging.getLogger(__name__)

# Type definition for summarizer functions
SummarizerFunc = Callable[[Dict[str, Any]], Awaitable[str]]

class Summarizer:
    """
    Summarizer for generating summaries of content using various LLM providers.
    Supports multiple LLM providers through registered summarizer functions.
    """
    
    def __init__(self):
        """Initialize the summarizer with empty summarizer registry."""
        self._summarizers: Dict[str, SummarizerFunc] = {}
        
    def register_summarizer(self, provider: str, summarizer: SummarizerFunc) -> None:
        """
        Register a summarizer function for a specific LLM provider.
        
        Args:
            provider: The LLM provider name (e.g., 'claude')
            summarizer: The async function that summarizes content using this provider
        """
        self._summarizers[provider] = summarizer
        logger.info(f"Registered summarizer for provider: {provider}")
        
    async def summarize(self, content: Dict[str, Any]) -> str:
        """
        Summarize content using the configured LLM provider.
        
        Args:
            content: The content to summarize
            
        Returns:
            A string containing the summary
            
        Raises:
            ValueError: If the content is invalid
            RuntimeError: If summarization fails
        """
        if not content:
            raise ValueError("Cannot summarize empty content")
            
        # Get the configured provider
        summarization_config = config.get_summarization()
        provider = summarization_config.provider
        
        # Find the appropriate summarizer
        summarizer = self._summarizers.get(provider)
        if not summarizer:
            raise RuntimeError(f"No summarizer registered for provider: {provider}")
            
        try:
            # Generate the summary
            logger.info(f"Generating summary using provider: {provider}")
            summary = await summarizer(content)
            return summary
        except Exception as e:
            logger.exception(f"Error generating summary: {e}")
            raise RuntimeError(f"Failed to generate summary: {str(e)}")

# Claude summarizer (placeholder)
async def summarize_with_claude(content: Dict[str, Any]) -> str:
    """
    Summarize content using Claude API.
    
    Args:
        content: The content to summarize
        
    Returns:
        A string containing the summary
        
    Raises:
        RuntimeError: If summarization fails
    """
    # This is a placeholder - actual implementation will come later
    logger.info("Summarizing content with Claude")
    
    # Get Claude configuration
    summarization_config = config.get_summarization()
    
    # Extract content details based on type
    content_type = content.get("type")
    
    if content_type == "youtube":
        title = content.get("title", "Unknown Title")
        description = content.get("description", "No description available")
        channel = content.get("channel", "Unknown Channel")
        
        # Placeholder for actual Claude API call
        summary = f"""
Summary of YouTube video: {title}

Channel: {channel}

Key points:
- This is a placeholder summary
- The actual summary will be generated by Claude
- The video appears to be about a sample topic
- More details would be included in a real summary

This summary was generated automatically and may not reflect the actual content.
"""
        return summary.strip()
    else:
        raise ValueError(f"Unsupported content type: {content_type}")

def create_summarizer() -> Summarizer:
    """
    Create and configure a summarizer with registered summarizers for supported LLM providers.
    
    Returns:
        A configured Summarizer instance
    """
    summarizer = Summarizer()
    
    # Register summarizers for supported providers
    summarizer.register_summarizer("claude", summarize_with_claude)
    
    return summarizer
